
top = '../../'

def options(opt):
	opt.add_option('--exp', action='store_true', default=True)
	opt.add_option('--rect', action='store_true', default=False)

def configure(conf):
    conf.env['PROJECT_ROOT'] = top
    conf.load('brick_general')

    conf.load('synopsys_dcshell')

    conf.start_msg('Compiling sub-implementation for')
    if conf.options.rect is True and conf.options.exp is True:
        raise Exception("Can only simulate either exp. synapses or rect. synapses")
    elif conf.options.rect is True and conf.options.exp is False:
        conf.env['exp_not_rect'] = False
        conf.end_msg('rect_syn_on_off')
    elif conf.options.rect is False and conf.options.exp is True:
        conf.end_msg('exp_syn')
        conf.env['exp_not_rect'] = True


def generate_libs(bld):
    #
    # Generate timing macro for SRAM_top
    #
    bld (
        name = 'cap_mem_top_gendb',
        rule = 'dc_shell-t -x "enable_write_lib_mode; read_lib ${SRC};write_lib -output ${TGT} capacitive_memory_top_wc;exit" > logfiles/cap_mem_top.genDB.log 2>&1',
        source =  bld.path.find_node(top+'/hicann-dls/units/capacitive_memory/abstract/capacitive_memory_top.lib'),
        target =  bld.bldnode.make_node(bld.env['BRICK_RESULTS']+'/capacitive_memory_top.db'),
    )

    bld (
        name = 'synapse_block_gendb',
        rule = 'dc_shell-t -x "enable_write_lib_mode; read_lib ${SRC};write_lib -output ${TGT} synapse_block_top_wc;exit" > logfiles/synapse_block.genDB.log 2>&1',
        source =  bld.path.find_node(top+'/hicann-dls/units/synapse/abstract/synapse_block_top.lib'),
        target =  bld.bldnode.make_node(bld.env['BRICK_RESULTS']+'/synapse_synapse_block_top.db'),
    )

    bld (
        name = 'denmem_block_gendb',
        rule = 'dc_shell-t -x "enable_write_lib_mode; read_lib ${SRC};write_lib -output ${TGT} denmem_block_tc;exit" > logfiles/denmem_block.genDB.log 2>&1',
        source =  bld.path.find_node(top+'/hicann-dls/units/neuron/abstract/denmem_block.lib'),
        target =  bld.bldnode.make_node(bld.env['BRICK_RESULTS']+'/denmem_block.db'),
    )

    bld (
        name = 'cadc_gendb',
        rule = 'dc_shell-t -x "enable_write_lib_mode; read_lib ${SRC};write_lib -output ${TGT} cadc_macro_tc;exit" > logfiles/cadc_macro.genDB.log 2>&1',
        source =  bld.path.find_node(top+'/hicann-dls/units/cadc/abstract/8_bit_adc.lib'),
        target =  bld.bldnode.make_node(bld.env['BRICK_RESULTS']+'/8_bit_adc.db'),
    )

    #for esd in ['esd_PDB1AC_lr','esd_PDB1A_lr', 'esd_PDB1A_hr', 'esd_PDB3AC_lr', 'esd_PDB3A_lr', 'esd_PDB3A_hr']:
    #    bld (
    #        name = esd+'_gendb',
    #        rule = 'dc_shell-t -x "read_lib ${SRC};write_lib -output ${TGT} '+esd+'_wc;exit" > logfiles/'+esd+'.genDB.log 2>&1',
    #        source =  bld.path.find_node(top+'/units/generic_elements/abstract/'+esd+'.lib'),
    #        target =  bld.bldnode.make_node(bld.env['BRICK_RESULTS']+'/generic_elements_'+esd+'.db'),
    #    )



def build(bld):
    bld.load('brick_general')

    NETWORK_SOURCES = [
            top + '/source/hdl/rtl/fp_package.sv',
            top + '/source/hdl/rtl/config_if.sv',
            top + '/source/hdl/rtl/system_if.sv',
            top + '/source/hdl/rtl/spike_in_if.sv',
            top +'/source/hdl/rtl/spike_out_if.sv',
            top +'/source/hdl/rtl/common/synapse_to_dendrite_current.sv',
            top + '/source/hdl/rtl/synapse_dendrite_if.sv',
            top + '/source/hdl/rtl/dendrite_neuron_if.sv',
            top + '/source/hdl/rtl/neuron.sv',
            top + '/source/hdl/rtl/dendrite.sv',
            top + '/source/hdl/rtl/nn.sv',
            top + '/source/hdl/rtl/row_global_parameters.sv'
        ]

    if bld.env['exp_not_rect'] is True:
        NETWORK_SOURCES.extend([
            top +'/source/hdl/rtl/exp_syn/synapse.sv',
            ])
    else:
        NETWORK_SOURCES.extend([
            top +'/source/hdl/rtl/rect_syn_on_off/synapse.sv',
            ])


    syn = bld (
        name = 'synth_hicdinn',
        design_name = 'nn',
        features = 'synopsys_dcshell',
        source = NETWORK_SOURCES,
        tcl_script = top+'/rtl2gds/dc_shell/top.tcl',
        #verilog_search_paths = [ top + '/hicann-dls/units/top/source/hdl/include' ] + bld.env.S2PP_VERILOG_INCLUDE,
    )

    bld.env.MINIASIC_0_SYN_NETLIST = syn.get_synthesized_netlist_node()
    bld.env.MINIASIC_0_SYN_CONSTRAINTS = syn.get_synthesized_constraints_node()

# vim: expandtab ts=4 sw=4
